<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux常用命令</title>
    <url>/2022/07/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="Linux关机，重启"><a href="#Linux关机，重启" class="headerlink" title="Linux关机，重启"></a>Linux关机，重启</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 关机</span><br><span class="line">shutdown -h now</span><br><span class="line"># 重启</span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="sshkey"><a href="#sshkey" class="headerlink" title="sshkey"></a>sshkey</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建sshkey</span><br><span class="line">ssh-keygen -t rsa -C email@136.com</span><br><span class="line"># id_rsa.pub的内容拷贝到要控制的服务器的home&#x2F;username&#x2F;.ssh&#x2F;authorized_keys中，如果没有则新建（.ssh权限为700，authorized的权限为600）</span><br></pre></td></tr></table></figure>
<h5 id="同步服务器时间"><a href="#同步服务器时间" class="headerlink" title="同步服务器时间"></a>同步服务器时间</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure>
<h5 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 后台运行，并且有nohup.out输出</span><br><span class="line">nohub xxx &amp;</span><br><span class="line"># 后台运行，不输出日志</span><br><span class="line">nohub xxx &gt; &#x2F;dev&#x2F;null &amp;</span><br><span class="line"># 后台运行，并将错误信息做标准输出到日志中</span><br><span class="line">nohup xxx &gt;out.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h5 id="强制活动用户推出"><a href="#强制活动用户推出" class="headerlink" title="强制活动用户推出"></a>强制活动用户推出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令完成强制活动用户退出，TTY表示终端名称</span><br><span class="line">pkill -kill -t[TTY]</span><br></pre></td></tr></table></figure>
<h5 id="配置dns"><a href="#配置dns" class="headerlink" title="配置dns"></a>配置dns</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;resolv.cnf</span><br></pre></td></tr></table></figure>
<h5 id="nslookup-查看域名路由表"><a href="#nslookup-查看域名路由表" class="headerlink" title="nslookup,查看域名路由表"></a>nslookup,查看域名路由表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nslookup google.com</span><br></pre></td></tr></table></figure>
<h5 id="最近登录信息"><a href="#最近登录信息" class="headerlink" title="最近登录信息"></a>最近登录信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 最近登录的5个账号</span><br><span class="line">last -n 5</span><br></pre></td></tr></table></figure>
<h5 id="设置固定IP"><a href="#设置固定IP" class="headerlink" title="设置固定IP"></a>设置固定IP</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig em1 192.168.1.1 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>
<h5 id="添加用户，配置sudo权限"><a href="#添加用户，配置sudo权限" class="headerlink" title="添加用户，配置sudo权限"></a>添加用户，配置sudo权限</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">useradd 用户名</span><br><span class="line">passwd 用户名</span><br><span class="line"># 增加sudo权限</span><br><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"># 修改文件里面的</span><br><span class="line"># root ALL&#x3D;(ALL) ALL</span><br><span class="line"># 用户名 ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure>
<h5 id="rpm相关"><a href="#rpm相关" class="headerlink" title="rpm相关"></a>rpm相关</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看是否通过rpm安装了该软件</span><br><span class="line">rpm -qa | grep 软件名</span><br></pre></td></tr></table></figure>
<h5 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看文件里有多少行</span><br><span class="line">wc -l filename</span><br><span class="line"># 查看文件里有多少个word</span><br><span class="line">wc -w filename</span><br><span class="line"># 文件里最长的一行有多少个字</span><br><span class="line">wc -L filename</span><br><span class="line"># 统计字节数</span><br><span class="line">wc -c</span><br></pre></td></tr></table></figure>
<h5 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 压缩目录</span><br><span class="line">tar -czvf xxx.tar</span><br><span class="line">zip -r xxx.zip</span><br></pre></td></tr></table></figure>
<h5 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压缩</span><br><span class="line">tar zxvf xxx.tar</span><br><span class="line">unzip xxx.zip</span><br><span class="line"># 解压到指定文件夹</span><br><span class="line">tar zxvf xxx.tar -C &#x2F;xxx&#x2F;yyy&#x2F;</span><br></pre></td></tr></table></figure>
<h5 id="变更文件所属用户，用户组"><a href="#变更文件所属用户，用户组" class="headerlink" title="变更文件所属用户，用户组"></a>变更文件所属用户，用户组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown eagleye.eagleye xx.log</span><br></pre></td></tr></table></figure>
<h5 id="cp-scp-mkdir"><a href="#cp-scp-mkdir" class="headerlink" title="cp,scp,mkdir"></a>cp,scp,mkdir</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制</span><br><span class="line">cp xx.log</span><br><span class="line"># 复制并强制覆盖同名文件</span><br><span class="line">cp -f xx.log</span><br><span class="line"># 复制文件夹</span><br><span class="line">cp -f xxx(源文件夹) yyy(目标文件夹)</span><br><span class="line"># 远程复制</span><br><span class="line">scp -P ssh端口 username@10.10.10.101:&#x2F;home&#x2F;username&#x2F;xxx &#x2F;home&#x2F;xxx</span><br><span class="line"># 级联创建目录</span><br><span class="line">mkdir -p &#x2F;xxx&#x2F;yyy&#x2F;zzz</span><br><span class="line"># 批量创建文件夹，会在test,main下都创建java,resources文件夹</span><br><span class="line">mkdir -p src&#x2F;&#123;test,main&#125;&#x2F;&#123;java,resources&#125;</span><br></pre></td></tr></table></figure>
<h5 id="比较两个文件"><a href="#比较两个文件" class="headerlink" title="比较两个文件"></a>比较两个文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diff -u 1.txt 2.txt</span><br></pre></td></tr></table></figure>
<h5 id="find检索命令"><a href="#find检索命令" class="headerlink" title="find检索命令"></a>find检索命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在目录下找后缀是.mysql的文件</span><br><span class="line">find &#x2F;home&#x2F;eagleye -name &#39;*.mysql&quot; -print</span><br><span class="line"># 会从&#x2F;usr目录开始往下找，找最近3天内存取过的文件</span><br><span class="line">find &#x2F;usr -atime 3 -print</span><br><span class="line"># 会从&#x2F;usr目录下找最近5天内修改过的文件</span><br><span class="line">find &#x2F;usr -ctime 5 -print</span><br><span class="line"># 会从&#x2F;doc目录下找jacky的文件名开头是j的文件</span><br><span class="line">find &#x2F;doc -user jacky -name &#39;j*&#39; -print</span><br><span class="line"># 会从&#x2F;doc目录下找寻文件名是ja开头或者ma开头的文件</span><br><span class="line">find &#x2F;doc \(-name &#39;ja*&#39; -o- -name &#39;ma*&#39;\) -print</span><br><span class="line"># 会从&#x2F;doc目录下找凡是文件名结尾为bak的文件，把它删除掉。-exec是执行，rm是删除，&#123;&#125;表示文件名，&quot;\;&quot;是规定命令结尾。</span><br><span class="line">find &#x2F;doc -name &#39;*bak&#39; -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h5 id="查看什么进程使用了该端口"><a href="#查看什么进程使用了该端口" class="headerlink" title="查看什么进程使用了该端口"></a>查看什么进程使用了该端口</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:port</span><br></pre></td></tr></table></figure>
<h5 id="获取本机ip地址"><a href="#获取本机ip地址" class="headerlink" title="获取本机ip地址"></a>获取本机ip地址</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ifconfig -algrep inetlgrep -v 127.0.0.1|grep -v inet6|awk &#39;&#123;print $2&#125;&#39;|tr -d &quot;addr:&quot;</span><br></pre></td></tr></table></figure>
<h5 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看iptables的状态</span><br><span class="line">service iptables status</span><br><span class="line"># 封停一个IP</span><br><span class="line">iptables -I INPUT -s **.**.**.** -j DROP</span><br><span class="line"># 解封一个IP</span><br><span class="line">iptables -D INPUT -s **.**.**.** -j DROP</span><br><span class="line">（-I表示insert(添加)，-D表示delete(删除)，input表示入站，**.**.**.**表示IP，drop表示放弃连接）</span><br><span class="line"># 开启9090端口访问</span><br><span class="line">&#x2F;sbin&#x2F;iptables -I INPUT -p tcp --dport 9090 -j ACCEPT</span><br><span class="line"># 防火墙开启，关闭，重启</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;iptables status</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;iptables start</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;iptables stop</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;iptables restart</span><br></pre></td></tr></table></figure>
<h5 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示本地打开的所有端口</span><br><span class="line">ss -l</span><br><span class="line"># 显示每个进程具体打开的socket</span><br><span class="line">ss -pl</span><br><span class="line"># 显示所有tcp socket</span><br><span class="line">ss -t -a</span><br><span class="line"># 显示所有udp socket</span><br><span class="line">ss -u -a</span><br><span class="line"># 显示所有已建立的SMTP连接</span><br><span class="line">ss -o state established &#39;(dport &#x3D; :smtp or sport &#x3D; :smtp)&#39;</span><br><span class="line"># 显示所有已建立的HTTP连接</span><br><span class="line">ss -o state established &#39;(dport &#x3D; :http or sport &#x3D; :http)&#39;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2020/09/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Gitee实现图床"><a href="#Gitee实现图床" class="headerlink" title="Gitee实现图床"></a>Gitee实现图床</h2><p>注册并登录Gitee，新建仓库， 仓库名称可随意命名  </p>
<a id="more"></a>

<p><img src="/images/pasted-11.png" alt="upload successful"><br>复制图中的地址</p>
<p><img src="/images/pasted-12.png" alt="upload successful"><br>使用git命令将当前仓库克隆到本地文件夹中（进入当前文件夹的cmd中操作）  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone 复制的地址</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-13.png" alt="upload successful"><br>文件夹中会出现此文件</p>
<p><img src="/images/pasted-14.png" alt="upload successful"><br>依次进行如下操作<br>1、cmd中进入当前文件夹中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd boom</span><br></pre></td></tr></table></figure>
<p>2、在boom文件夹中新建images文件夹，将所要上传的图片放入images中后执行如下命令（添加当前目录所有文件到暂存区）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>
<p>3、执行命令如下（提交暂存区到仓库区）  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;提交注释&quot;</span><br></pre></td></tr></table></figure>
<p>4、执行命令（上传当前分支到远程仓库）  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-17.png" alt="upload successful"><br>进入Gitee打开boom仓库，点击服务，Gitee Pages后，部署目录选择存放图片的文件夹，点击启动按钮</p>
<p><img src="/images/pasted-18.png" alt="upload successful"><br>复制启动后网址（如图中出现的网址），在地址栏中粘贴复制网址加上图片文件名即可查看所存放图片文件。例：<a href="http://mask0117.gitee.io/boom/INFINITY.jpg" target="_blank" rel="noopener">http://mask0117.gitee.io/boom/INFINITY.jpg</a></p>
<p><img src="/images/pasted-19.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>Git命令</category>
      </categories>
  </entry>
  <entry>
    <title>List集合递归转树结构</title>
    <url>/2022/04/16/List%E9%9B%86%E5%90%88%E9%80%92%E5%BD%92%E8%BD%AC%E6%A0%91%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="List转树结构"><a href="#List转树结构" class="headerlink" title="List转树结构"></a>List转树结构</h3><a id="more"></a>
<p>实体类Test，图中只列举部分属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">	private Integer id;</span><br><span class="line">    private Integer pId;</span><br><span class="line">    private List&lt;Test&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public List&lt;Test&gt; listToTree(List&lt;Test&gt; list)&#123;</span><br><span class="line">	List&lt;Test&gt; treeList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Test&gt; rootList &#x3D; list.stream.filter(v -&gt; v.getPId() &#x3D;&#x3D; 0).collect(Collectors.toList());  &#x2F;&#x2F;获取集合中根节点，pId为0的数据为根节点。</span><br><span class="line">    rootList.forEach(tree -&gt; treeList.add(findChikdren(tree,list)));</span><br><span class="line">    return treeList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Test findChildren(Test test,List&lt;Test&gt; list)&#123;</span><br><span class="line">	for(Test t:list)&#123;</span><br><span class="line">    	if (t.getPId().equals(test.getId()))&#123;</span><br><span class="line">        	if (test.getChildren &#x3D;&#x3D; null)&#123;</span><br><span class="line">            	test.setChildren(new ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            test.getChildren().add(findChildren(t,list));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2020/07/19/Test/</url>
    <content><![CDATA[<h2 id="使用Hexo和GitHub搭建个人博客"><a href="#使用Hexo和GitHub搭建个人博客" class="headerlink" title="使用Hexo和GitHub搭建个人博客"></a>使用Hexo和GitHub搭建个人博客</h2><h3 id="Hexo-GitHubPages"><a href="#Hexo-GitHubPages" class="headerlink" title="Hexo+GitHubPages"></a>Hexo+GitHubPages</h3><h3 id="默认主题-landscape"><a href="#默认主题-landscape" class="headerlink" title="默认主题(landscape)"></a>默认主题(landscape)</h3>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu中开启Redis服务</title>
    <url>/2021/04/07/Ubuntu%E4%B8%AD%E5%BC%80%E5%90%AFRedis%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="Redis服务"><a href="#Redis服务" class="headerlink" title="Redis服务"></a>Redis服务</h3><p>进入redis安装后的默认路径</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<h4 id="Redis服务启动"><a href="#Redis服务启动" class="headerlink" title="Redis服务启动"></a>Redis服务启动</h4><p>Redis安装后会有redis.conf配置文件，将redis.conf配置文件备份至新存储路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server &#x2F;redis&#x2F;myredis&#x2F;redis.conf   &#x2F;&#x2F;redis-server后为redis.conf备份路径</span><br></pre></td></tr></table></figure>
<h4 id="Redis服务连接"><a href="#Redis服务连接" class="headerlink" title="Redis服务连接"></a>Redis服务连接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>
<h4 id="密码验证"><a href="#密码验证" class="headerlink" title="密码验证"></a>密码验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth 密码</span><br></pre></td></tr></table></figure>
<p>完整步骤如下：</p>
<p><img src="/images/pasted-20.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>创建vue项目</title>
    <url>/2020/08/10/%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>cmd中，进入你想放置vue项目的文件夹，执行如下命令  </p>
<pre><code>vue init webpack [project]      //project为vue项目名称  </code></pre><a id="more"></a>

<p><img src="/images/pasted-5.png" alt="upload successful">  </p>
<p><img src="/images/pasted-6.png" alt="upload successful"></p>
<p><img src="/images/pasted-7.png" alt="upload successful"></p>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<p><img src="/images/pasted-9.png" alt="upload successful"><br>项目创建成功<br><img src="/images/pasted-10.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>使用 Hexo+GitHub搭建个人博客教程</title>
    <url>/2020/07/20/%E4%BD%BF%E7%94%A8-Hexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、搭建前提"><a href="#一、搭建前提" class="headerlink" title="一、搭建前提"></a>一、搭建前提</h2><p> 安装node.js（建议将安装镜像更换为国内镜像）</p>
<p> 安装git，并配置好相关内容 ,<a href="https://mask0117.github.io/2020/07/20/配置本地Git与GitHub的SSH-Key/" target="_blank" rel="noopener">配置本地git与GitHub的SSH Key</a></p>
<p> 注册并登录GitHub  </p>
<a id="more"></a>


<h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p>​    安装完git后，程序栏会出现 git bash，打开 git bash，输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>​    -g 表示全局安装，-cli 表示命令行</p>
<h2 id="三、本地搭建Hexo博客"><a href="#三、本地搭建Hexo博客" class="headerlink" title="三、本地搭建Hexo博客"></a>三、本地搭建Hexo博客</h2><p>​    完成第二步操作后，hexo已下载到本地</p>
<p>​    在磁盘中选择一个位置新建文件夹来存放你的博客文件，如：D:\GitHubBLOG，在该文件夹下右键，点击 git bash here，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init  &#x2F;&#x2F;本地生成hexo模板</span><br></pre></td></tr></table></figure>

<p>​    继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server  &#x2F;&#x2F;打开服务</span><br></pre></td></tr></table></figure>

<p>​    加载完成后，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，即可看到hexo的默认主题博客页面</p>
<h2 id="四、GitHub托管博客"><a href="#四、GitHub托管博客" class="headerlink" title="四、GitHub托管博客"></a>四、GitHub托管博客</h2><p>​    在操作本步骤之前需将本地 git 与 GitHub 间的 SSH Key 配置完成</p>
<p>​    登录本人的 GitHub 账号，在 GitHub 中创建以当前用户名命名的项目（必须以用户名命名，我已经创建此仓库，只是为此次博客截图）</p>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
<p>​    打开新建存放博客的文件夹，找到 _config.yml 配置文件并打开，找到 deploy，添加如下内容，在添加内容过程中必须注意格式，冒号后面空格一定要加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;MASK0117&#x2F;MASK0117.github.io.git  &#x2F;&#x2F;将此处更改为自己的仓库 HTTPS 地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-0.png" alt="upload successful">  </p>
<p>​    更改完成后，执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save  &#x2F;&#x2F;安装部署插件</span><br><span class="line">$ hexo g  &#x2F;&#x2F;hexo generate 本地生成静态文件</span><br><span class="line">$ hexo d  &#x2F;&#x2F;hexo deploy 将本地文件推送至GitHub</span><br></pre></td></tr></table></figure>

<p>​    访问<a href="https://MASK0117.github.io" target="_blank" rel="noopener">https://MASK0117.github.io</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
  </entry>
  <entry>
    <title>配置本地Git与GitHub的SSH Key</title>
    <url>/2020/07/20/%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0Git%E4%B8%8EGitHub%E7%9A%84SSH-Key/</url>
    <content><![CDATA[<h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>  Git安装成功后，在桌面或程序栏中找到 Git Bash 打开，也可在桌面点击鼠  标右键打开 Git Bash<br>  在窗口中输入指令：<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;  &#x2F;&#x2F;填写你的GitHub注册邮箱</span><br></pre></td></tr></table></figure><br>  <a id="more"></a><br>  根据提示依次操作，可默认直接回车<br>  找到秘钥默认保存位置，在上述回车过程可找到（即 Enter file in which to save the key 选项后面路径）<br>  打开此目录，找到 id_rsa.pub 文件，用记事本打开并复制到粘贴板<br>  登录GitHub，进入主页 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key:  </p>
<p><img src="/images/pasted-2.png" alt="upload successful"><br>将复制的内容粘贴在 key 栏中，title可任意命名，点击Add SSH Key，保存秘钥</p>
<p><img src="/images/pasted-3.png" alt="upload successful"><br>上述操作完成后，进入 Git Bash 中，输入下列指令查看是否配置成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com  &#x2F;&#x2F;直接输入此命令，不用更改为自己邮箱地址</span><br></pre></td></tr></table></figure>
<p>出现以下内容即为配置成功  </p>
<p><img src="/images/pasted-4.png" alt="upload successful"><br>第一次配置有的可能在输入上个指令后需再输入 yes 后才会出现此内容，but 后的内容可不用理会，为了安全，默认不允许 shell 连接</p>
]]></content>
      <categories>
        <category>SSH Key</category>
      </categories>
  </entry>
  <entry>
    <title>Redis持久化机制</title>
    <url>/2022/08/04/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h5 id="什么叫持久化机制？"><a href="#什么叫持久化机制？" class="headerlink" title="什么叫持久化机制？"></a>什么叫持久化机制？</h5><p>我们往Redis插数据的时候，这个数据会同步一份保存到磁盘，而保存到磁盘有两种方式，对应两种数据文件格式：AOF和RDB这两种文件，在Redis从断电到开机的瞬间都可以让我们的数据从磁盘恢复到Redis。</p>
<p>那么问题来了，AOF和RDB两者的区别在哪里。</p>
<a id="more"></a>

<p>RDB是Redis的一个快照文件，那什么叫快照？</p>
<p>比如说现在的时间是下午14:00，Redis做了一次快照的备份，把这个数据备份到了RDB，那么这个RDB文件的数据就只停留在下午两点，下午两点以后的数据RDB是没有的，因为它相当于一个冷备，备份的时间只停留在下午两点钟这个时刻的快照。<br>所以，你如果回答的是RDB，它的数据一定会有丢失。</p>
<p>除了RDB，第二个方式就是AOF，那AOF有什么问题呢？</p>
<p>当我们往Redis里不断插入数据，它会以日志的方式追加（Append）到AOF文件里，也就是说AOF里面记录了很多这种原始的操作语句，比如说set、hset等等，当我们使用AOF恢复数据到Redis的时候，它会重新执行一遍我们之前操作的所有操作语句。</p>
<p>这里我举个例子：<br>第一条 &gt; set name 小帅<br>第二条 &gt; set name 小美<br>第三条 &gt; set name 佛波勒</p>
<p>以上三条语句都追加到了AOF文件里，很明显，此刻如果我们执行get name，Redis返回的是“佛波勒”，那么问题来了，AOF存了这么多过程化的数据，或者说是中间数据，它的意义在哪里？<br>没有意义！</p>
<p>因为最终Redis恢复的时候最终的数据是“佛波勒”，哪怕Redis把前两条数据恢复了，在最后name被恢复的时候，也会被“佛波勒”覆盖，所以前两条数据是不可取的，浪费了我们的空间，那样咱们的AOF文件会越变越大。</p>
<p>所以Redis是怎么做的呢，AOF里还有个技术叫Rewrite压缩重写，当我们的AOF文件不断变大的时候，比如我们设置的阀值是64M，当AOF文件第一次到达64M的时候，Redis会自动触发一次Rewrite操作，将AOF文件进行一次瘦身。</p>
<p>接下来，我们再来对比RDB和AOF的优缺点。</p>
<h6 id="1、RDB：Redis-DataBase"><a href="#1、RDB：Redis-DataBase" class="headerlink" title="1、RDB：Redis DataBase"></a>1、RDB：Redis DataBase</h6><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。</p>
<p>优点：<br>    1、整个Redis数据库将只包含一个文件 dump.rdb，方便持久化。<br>    2、容灾性好，方便备份。<br>    3、性能最大化，fork子进程来完成写操作，让主进程继续处理命令，所以是IO最大化，使用单独的子进程来进行持久化，主      进程不会进行任何IO操作，保证了Redis的高性能。<br>    4、相对于数据集大时，比AOF的启动效率更高。</p>
<p>缺点：<br>    1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间redis 发生故障，会发生数据丢失，所以这种方式更适      合用于数据要求不严谨的场景。<br>    2、由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务        几百毫秒，甚至是1秒钟。</p>
<h6 id="2、AOF：Append-Only-File"><a href="#2、AOF：Append-Only-File" class="headerlink" title="2、AOF：Append Only File"></a>2、AOF：Append Only File</h6><p>以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。</p>
<p>优点：<br>    1、数据安全，Redis中提供了3种同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率      也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失，而每修改同步，我们可以将其      视为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中。<br>    2、通过append模式写文件，即使中途服务器宕机也不会破坏已经存在的内容，可以通过redis-check-aof工具      解决      数据一致性问题。<br>    3、AOF机制的rewrite模式。定期对AOF文件进行重写，以达到压缩的目的。</p>
<p>缺点：<br>    1、AOF 文件比 RDB 文件大，且恢复速度慢。<br>    2、数据集大的时候，比rdb 启动效率低。<br>    3、运行效率没有RDB高。<br>    4、AOF文件比RDB更新频率高，优先使用AOF还原数据。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
</search>
